module static-semantics/actions/binops

imports
  static-semantics/types/built-ins

  static-semantics/webdsl-types
  static-semantics/webdsl

rules // binary operators
  // (e1 + e2)
  typeOfExp(s, exp@Add(e1, e2)) = T :-
    typeOfAdd(s, e1, e2) == T,
    @exp.type := T.

  typeOfPlaceholderExp(s, exp@PHAdd(e1, e2)) = T :-
    typeOfAdd(s, e1, e2) == T,
    @exp.type := T.

  typeOfAdd : scope * Exp * Exp -> TYPE
  typeOfAdd(s, e1, e2) = T :- { T1 T2 }
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAdd(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong operand types for operator +: [e1] has type [T1], [e2] has type [T2]]. // correct error message for tests

  // (e1 - e2)
  typeOfExp(s, exp@Sub(e1, e2)) = T :- { T1 T2 }
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong operand types for operator -: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := T.

  // (e1 * e2)
  typeOfExp(s, exp@Mul(e1, e2)) = T :- { T1 T2 }
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong operand types for operator *: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := T.

  // (e1 / e2)
  typeOfExp(s, exp@Div(e1, e2)) = T :- { T1 T2 }
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong operand types for operator /: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := T.

  // (e1 % e2)
  typeOfExp(s, exp@Mod(e1, e2)) = T :- { T1 T2 }
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) == T,
    inequalType(T, UNTYPED()) | error $[Wrong operand types for operator %: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := T.

  // (e1 > e2)
  typeOfExp(s, exp@LargerThan(e1, e2)) = t :- { T1 T2 }
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) != UNTYPED() | error $[Wrong operand types for operator >: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := t.

  // (e1 >= e2)
  typeOfExp(s, exp@LargerThanOrEqual(e1, e2)) = t :- { T1 T2 }
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) != UNTYPED() | error $[Wrong operand types for operator >=: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := t.

  // (e1 < e2)
  typeOfExp(s, exp@SmallerThan(e1, e2)) = t :- { T1 T2 }
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) != UNTYPED() | error $[Wrong operand types for operator <: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := t.

  // (e1 <= e2)
  typeOfExp(s, exp@SmallerThanOrEqual(e1, e2)) = t :- { T1 T2 }
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    lubForAddNumeric(T1, T2) != UNTYPED() | error $[Wrong operand types for operator <=: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := t.

  // (e1 && e2)
  typeOfExp(s, exp@And(e1, e2)) = b :- { T1 T2 }
    b == bool(s),
    typeOfExp(s, e1) == T1, typeCompatible(T1, b) | error $[Wrong operand types for operator And: [e1] has type [T1], expected Bool], // correct error message for tests
    typeOfExp(s, e2) == T2, typeCompatible(T2, b) | error $[Wrong operand types for operator And: [e2] has type [T2], expected Bool], // correct error message for tests
    @exp.type := b.

  // (e1 || e2)
  typeOfExp(s, exp@Or(e1, e2)) = b :- { T1 T2 }
    b == bool(s),
    typeOfExp(s, e1) == T1, typeCompatible(T1, b) | error $[Wrong operand types for operator Or: [e1] has type [T1], expected Bool], // correct error message for tests
    typeOfExp(s, e2) == T2, typeCompatible(T2, b) | error $[Wrong operand types for operator Or: [e2] has type [T2], expected Bool], // correct error message for tests
    @exp.type := b.

  // (e1 == e2)
  typeOfExp(s, exp@Eq(e1, e2)) = t :- { T1 T2 }
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    or(
      typeCompatibleB(T1, T2),
      typeCompatibleB(T2, T1)
    ) | error $[Wrong operand types for operator ==: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type := t.

  // (e1 != e2)
  typeOfExp(s, exp@NotEq(e1, e2)) = t :- { T1 T2 }
    t == bool(s),
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    or(
      typeCompatibleB(T1, T2),
      typeCompatibleB(T2, T1)
    ) | error $[Wrong operand types for operator !=: [e1] has type [T1], [e2] has type [T2]], // correct error message for tests
    @exp.type :=t.

  // e1 in e2
  typeOfExp(s, exp@InColl(e1, e2)) = bool(s) :- { T1 T2 }
    typeOfExp(s, e1) == T1,
    stripGenericType(typeOfExp(s, e2)) == T2,
    typeCompatible(T1, T2) | error $[Wrong operand types for operator in: [e1] has type [T1], [e2] has type [T2]]. // correct error message for tests

rules // unary operators

  // (!e)
  typeOfExp(s, exp@Not(e)) = t :- { T }
    t == bool(s),
    typeOfExp(s, e) == T,
    T == t | error $[Wrong operand types for operator !: [e] has type [T], expected Bool], // correct error message for tests
    @exp.type := t.

rules // utils

  lubForAdd : TYPE * TYPE -> TYPE
  lubForAdd(T1, T2) = lubForAddNumeric(T1, T2).
  lubForAdd(t@BUILTINTYPE("String", _), _) = t.
  lubForAdd(_, t@BUILTINTYPE("String", _)) = t.

  lubForAddNumeric : TYPE * TYPE -> TYPE
  lubForAddNumeric(_, _) = UNTYPED().
  lubForAddNumeric(t@BUILTINTYPE("Int", _)    , t) = t.
  lubForAddNumeric(t@BUILTINTYPE("Long", _)   , t) = t.
  lubForAddNumeric(t@BUILTINTYPE("Float", _)  , t) = t.
  lubForAddNumeric(t@NATIVECLASS("Double", _) , t) = t.

  // implicit widening from int to long
  lubForAddNumeric(BUILTINTYPE("Int", _)      , t@BUILTINTYPE("Long", _))   = t.
  lubForAddNumeric(t@BUILTINTYPE("Long", _)   , BUILTINTYPE("Int", _))      = t.

  // implicit widening from float to double
  lubForAddNumeric(t@NATIVECLASS("Double", _) , BUILTINTYPE("Float", _))    = t.
  lubForAddNumeric(BUILTINTYPE("Float", _)    , t@NATIVECLASS("Double", _)) = t.
